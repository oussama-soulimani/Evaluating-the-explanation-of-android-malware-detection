from Explanations import Explanations
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, BaggingClassifier, GradientBoostingClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.gaussian_process import GaussianProcessClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from copy import copy
import numpy as np
numIrrelevant = 200

print("Start")
classifiers = [
    AdaBoostClassifier(),
    SVC(probability=True),
    RandomForestClassifier(n_estimators=50, n_jobs=5),
    BaggingClassifier(),
    MLPClassifier(alpha=1, max_iter=1000),
    KNeighborsClassifier(1),
    GaussianNB(),
    GradientBoostingClassifier(),
    GaussianProcessClassifier(),
    DecisionTreeClassifier(max_depth=5)
]

exp = []
exp.append(Explanations(numIrrelevant=0))
for i in range(4):
    exp.append(Explanations(numIrrelevant=numIrrelevant))

explainers = [
    exp[0].MorrisSensitivityExplain,
    exp[1].LimeExplain,
    exp[2].AnchorExplain,
    exp[3].EDCExplain, 
    exp[4].ShapExplain 
]

expo = []
expo.append(Explanations(numIrrelevant=0))
for i in range(4):
    expo.append(Explanations(numIrrelevant=numIrrelevant))

explaino = [
    expo[0].MorrisSensitivityExplain,
    expo[1].LimeExplain,
    expo[2].AnchorExplain,
    expo[3].EDCExplain,
    expo[4].ShapExplain 
]

print("END")
def CRValue(FeatureSets):
    if len(FeatureSets)==0:
        return 0
    S = FeatureSets
    Z = []
    for FeatureSet in FeatureSets:
        for feature in FeatureSet:
            Z.append(feature)
    Z = set(Z)
    sum = 0
    for feature in Z:
        for FeatureSet in S:
            val=0
            if feature in FeatureSet:
                val = 1
            sum+=val
    CR=sum/(len(Z)*len(S))
    return CR
        
def consistency():
    AllFeatures = np.array([])
    for i in range(len(explainers)):
        features = []
        for classifier in classifiers:
            try:
                # print(str(explainers[i]).split(" ")[2], str(classifier))
                if "Morris" in str(explainers[i]):
                    expl = explainers[i](classifier)
                else:
                    Classifier = exp[i].classify(classifier=classifier)
                    expl = explainers[i](Classifier, exp[i].explain_apps[0])
                AllFeatures = np.concatenate((AllFeatures,expl))
                features.append(expl)
            except Exception as e:
                continue
        print(str(explainers[i]).split(" ")[2], "=========>> CR=", CRValue(features))
        # print("************************************")
# consistency()


def soundness():
    classifier = classifiers[0]
    i = -1
    for explainer in explainers:
        print(str(explainer))
        print("****************************************************")
        i+=1
        if "Morris" in str(explainer):
            expl1 = explainer(classifier,numRelevant=40, numIrrelevant=0)
        else:
            expl1 = explainer(exp[i].classify(classifier=classifier), exp[i].explain_apps[0])
        
        if "Morris" in str(explaino[i]):
            expl2 = explaino[i](classifier,numRelevant=40, numIrrelevant=40)
        else:
            expl2 = explaino[i](expo[i].classify(classifier=classifier), expo[i].explain_apps[0])

        # print("expl1:", expl1)
        # print("expl2:", expl2)
        Ri=[]
        Ro=[]
        for feature in expl2:
            if feature in expo[i].AllFeatures[expo[i].IrrelevantFeatures]:
                Ri.append(feature)
            else:
                Ro.append(feature)
                
        SR = 0.25*(1-(len(Ri)/len(expo[i].IrrelevantFeatures)))+0.75*CRValue([Ro, expl1])
        print("===> SR", SR)

        # print(CRValue([Ro, expl1]))
        
        # difference_1 = set(expl1).difference(set(expl2))
        # difference_2 = set(expl2).difference(set(expl1))
        # list_difference = list(difference_1.union(difference_2))
        # print("===>",list_difference )
        print("****************************************************")
soundness()    
